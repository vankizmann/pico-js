// types/utility/dom.d.ts

declare class Dom {
    el: any;
    static events: any[];
    static datas: any[];

    constructor(el: any);

    static ready(callback: Function, delay?: number, count?: number): typeof Dom;
    static complete(callback: Function, delay?: number, count?: number): typeof Dom;
    static required(callback: Function, globals?: string[], timer?: number): typeof Dom;
    static find(element: any): Dom;
    static make(element: any, options?: any): Dom;
    static location(posx: number, posy: number): Dom;
    static title(text?: string, glue?: string): typeof Dom;

    length(): number;
    empty(): boolean;
    visible(): boolean;
    inviewX(ratio?: number): boolean;
    inviewY(ratio?: number): boolean;
    is(selector: string): boolean;
    isParent(selector: any): boolean;
    first(offset?: number): any;
    last(offset?: number): any;
    get(index?: number): any;
    getNot(el: any): Dom | null;
    each(callback: Function): any;
    matches(selector: string): boolean;
    closest(selector: any): any;
    closestScrollable(fallback?: any): any;
    contains(selector: any): boolean;
    inside(selector: any): boolean;
    parent(): Dom;
    child(selector: any): Dom;
    childs(selector?: any, filter?: boolean): Dom;
    find(selector: string): Dom;
    where(selector: string): Dom;
    not(selector: string): Dom;
    prepend(val: any): this;
    prependTo(el: any): this;
    append(val: any): this;
    appendTo(el: any): this;
    replace(el: any): this;
    previous(): Dom;
    next(): Dom;
    loaded(callback: Function): this;
    bind(event: string, callback: Function): this;
    unbind(event: string): void;
    on(event: string | string[], callback: Function, options?: any, paused?: boolean): this;
    live(event: string | string[], selector: string, callback: Function, options?: any, paused?: boolean): this;
    one(event: string, callback: Function, options?: any): this;
    fire(event: string): this;
    delayed(event: string, callback: Function, delay?: number, options?: any): this;
    off(event: string | string[], selector?: string, options?: any): this;
    unpause(event: string | string[], selector?: string, options?: any): this;
    pause(event: string | string[], selector?: string, options?: any): this;
    observer(callback: Function, initial?: boolean): Function;
    observerResize(callback: Function, initial?: boolean): Function;
    data(key?: any, val?: any, fallback?: any): any;
    value(val?: any): any;
    html(html: string): this;
    computed(key?: string, fallback?: any): any;
    css(vals?: any): any;
    class(vals: string | string[]): void;
    hasClass(vals: string | string[]): boolean;
    addClass(vals: string | string[]): this | void;
    removeClass(vals: string | string[]): this | void;
    toggleClass(vals: string | string[]): this;
    attr(attr: any, val?: any): any;
    actual(callback: Function, val?: any): any;
    loopParent(callback: Function, target?: any): boolean;
    loopOffsetParent(callback: Function, target?: any): boolean;
    offset(key?: string, boundry?: any): any;
    offsetTop(boundry?: any): number;
    offsetBottom(boundry?: any): number;
    offsetLeft(boundry?: any): number;
    offsetRight(boundry?: any): number;
    scroll(key?: string, boundry?: any): any;
    scrollTop(val?: number, boundry?: any): number | this;
    scrollTopGlobal(): number;
    scrollLeft(val?: number, boundry?: any): number | this;
    scrollLeftGlobal(): number;
    margin(key?: string): any;
    padding(key?: string): any;
    height(): number;
    clientHeight(): number;
    scrollHeight(): number;
    innerHeight(): number;
    realHeight(styles?: any): number | string;
    evaluateHeight(target?: any, auto?: boolean): number | string;
    width(): number;
    clientWidth(): number;
    scrollWidth(): number;
    innerWidth(): number;
    realWidth(styles?: any): number;
    evaluateWidth(target?: any, auto?: boolean): number | string;
}

export default Dom;
